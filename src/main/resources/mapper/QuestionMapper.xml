<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.example.student_testing.test.mapper.QuestionMapper">

    <select id="findAll" resultType="org.example.student_testing.test.dto.QuestionDTO">
        SELECT question_id AS questionId, content, option_a AS optionA, option_b AS optionB,
               option_c AS optionC, option_d AS optionD, correct_option AS correctOption,
               difficulty_id AS difficultyId, topic_id AS topicId, created_by AS createdBy,
               created_at AS createdAt
        FROM questions
        ORDER BY created_at DESC
    </select>

    <select id="findById" resultType="org.example.student_testing.test.dto.QuestionDTO">
        SELECT question_id AS questionId, content, option_a AS optionA, option_b AS optionB,
               option_c AS optionC, option_d AS optionD, correct_option AS correctOption,
               difficulty_id AS difficultyId, topic_id AS topicId, created_by AS createdBy,
               created_at AS createdAt
        FROM questions
        WHERE question_id = #{questionId}
    </select>

    <insert id="insert" parameterType="org.example.student_testing.test.dto.QuestionDTO">
        INSERT INTO questions(content, option_a, option_b, option_c, option_d, correct_option,
                              difficulty_id, topic_id, created_by, created_at)
        VALUES (#{content}, #{optionA}, #{optionB}, #{optionC}, #{optionD}, #{correctOption},
                #{difficultyId}, #{topicId}, #{createdBy}, CURRENT_TIMESTAMP)
    </insert>

    <update id="update" parameterType="org.example.student_testing.test.dto.QuestionDTO">
        UPDATE questions
        SET content = #{content},
            option_a = #{optionA},
            option_b = #{optionB},
            option_c = #{optionC},
            option_d = #{optionD},
            correct_option = #{correctOption},
            difficulty_id = #{difficultyId},
            topic_id = #{topicId},
            created_by = #{createdBy},
            created_at = CURRENT_TIMESTAMP
        WHERE question_id = #{questionId}
    </update>

    <delete id="delete" parameterType="int">
        DELETE FROM questions
        WHERE question_id = #{questionId}
    </delete>



    <select id="findQuestionsByTestId" resultType="org.example.student_testing.test.dto.QuestionDTO">
        SELECT q.question_id AS questionId,
               q.content,
               q.option_a AS optionA,
               q.option_b AS optionB,
               q.option_c AS optionC,
               q.option_d AS optionD,
               q.correct_option AS correctOption,
               q.difficulty_id AS difficultyId,
               q.topic_id AS topicId,
               t.topic_name AS topicName
        FROM test_questions tq
                 JOIN questions q ON tq.question_id = q.question_id
                 JOIN topics t ON q.topic_id = t.topic_id
        WHERE tq.test_id = #{testId}
        ORDER BY tq.order_no
    </select>

    <select id="getCorrectOption" resultType="String">
        SELECT correct_option FROM questions WHERE question_id = #{questionId}
    </select>


    <select id="findRandomQuestionsByTopic" resultType="org.example.student_testing.test.dto.QuestionDTO">
        SELECT question_id AS questionId,
               topic_id AS topicId,
               content,
               option_a AS optionA,
               option_b AS optionB,
               option_c AS optionC,
               option_d AS optionD,
               correct_option AS correctOption,
               difficulty_id AS difficultyId,
               created_by AS createdBy
        FROM questions
        WHERE topic_id = #{topicId}
        ORDER BY RANDOM()
            LIMIT #{count}
    </select>




    <select id="findNextQuestion" resultType="org.example.student_testing.test.dto.QuestionDTO">
        SELECT question_id AS questionId,
               content,
               option_a AS optionA,
               option_b AS optionB,
               option_c AS optionC,
               option_d AS optionD,
               correct_option AS correctOption,
               difficulty_id AS difficultyId,
               topic_id AS topicId
        FROM questions
        WHERE difficulty_id = #{difficultyId}
          AND question_id NOT IN (
            SELECT question_id FROM test_questions
            WHERE student_username = #{studentUsername}
              AND test_id = #{testId}
        )
        ORDER BY RANDOM()
            LIMIT 1
    </select>


    <select id="randomQuestionsByTopic" resultType="org.example.student_testing.test.dto.QuestionDTO">
        SELECT q.question_id AS questionId,
               q.content,
               q.option_a AS optionA,
               q.option_b AS optionB,
               q.option_c AS optionC,
               q.option_d AS optionD,
               q.correct_option AS correctOption,

               q.topic_id AS topicId,
               t.topic_name AS topicName
        FROM questions q
                 JOIN topics t ON q.topic_id = t.topic_id
        WHERE q.topic_id = #{topicId}

        ORDER BY RANDOM()
            LIMIT #{limit}
    </select>

    <select id="getQuestionsByTestIdAndStudent" resultType="org.example.student_testing.test.dto.QuestionDTO">
        SELECT q.question_id AS questionId,
               q.content,
               q.option_a AS optionA,
               q.option_b AS optionB,
               q.option_c AS optionC,
               q.option_d AS optionD,
               q.correct_option AS correctOption,
               q.difficulty_id AS difficultyId,
               q.topic_id AS topicId,
               t.topic_name AS topicName
        FROM test_questions tq
                 JOIN questions q ON tq.question_id = q.question_id
                 JOIN topics t ON q.topic_id = t.topic_id
        WHERE tq.test_id = #{testId}
          AND tq.student_username = #{studentUsername}
        ORDER BY tq.order_no
    </select>





    <select id="findQuestionIdsByTestId" resultType="int">
        SELECT question_id FROM test_questions WHERE test_id = #{testId}
    </select>

    <select id="findCorrectOptionByQuestionId" resultType="string">
        SELECT correct_option FROM questions WHERE question_id = #{questionId}
    </select>

    <select id="findSelectedOption" resultType="string">
        SELECT selected_option FROM student_answers
        WHERE test_id = #{testId} AND student_username = #{studentUsername} AND question_id = #{questionId}
    </select>


</mapper>
